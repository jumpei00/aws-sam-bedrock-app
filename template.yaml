AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  bedrock-app
  Sample SAM Template for bedrock-app

Globals:
  Function:
    Architectures:
      - x86_64
    Timeout: 3

Resources:
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn
    DependsOn: ApiGatewayCloudWatchRole
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Demo
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi/schema.yaml
      AccessLogSetting:
        DestinationArn: !GetAtt APIGatewayAccessLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
    DependsOn: ApiGatewayAccount
  APIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}"
      RetentionInDays: 7
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: shared-layer
      Description: Shared modules layer
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain
  HelloFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: hello-world-function
      CodeUri: functions/hello/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - !Ref SharedLayer
  HelloFnPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/GET/hello"

Outputs:
  APIGateway:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/Demo"
  HelloFn:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloFn.Arn
  HelloFnRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloFnRole.Arn
